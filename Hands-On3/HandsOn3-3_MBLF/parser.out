Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expr
Rule 1     expr -> expr OR expr
Rule 2     expr -> expr AND expr
Rule 3     expr -> NOT expr
Rule 4     expr -> arith
Rule 5     arith -> arith PLUS term
Rule 6     arith -> arith MINUS term
Rule 7     arith -> term
Rule 8     term -> term TIMES factor
Rule 9     term -> term DIVIDE factor
Rule 10    term -> factor
Rule 11    factor -> LPAREN expr RPAREN
Rule 12    factor -> NUMBER

Terminals, with rules where they appear

AND                  : 2
DIVIDE               : 9
LPAREN               : 11
MINUS                : 6
NOT                  : 3
NUMBER               : 12
OR                   : 1
PLUS                 : 5
RPAREN               : 11
TIMES                : 8
error                : 

Nonterminals, with rules where they appear

arith                : 4 5 6
expr                 : 1 1 2 2 3 11 0
factor               : 8 9 10
term                 : 5 6 7 8 9

Parsing method: LALR

state 0

    (0) S' -> . expr
    (1) expr -> . expr OR expr
    (2) expr -> . expr AND expr
    (3) expr -> . NOT expr
    (4) expr -> . arith
    (5) arith -> . arith PLUS term
    (6) arith -> . arith MINUS term
    (7) arith -> . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (10) term -> . factor
    (11) factor -> . LPAREN expr RPAREN
    (12) factor -> . NUMBER

    NOT             shift and go to state 2
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7

    expr                           shift and go to state 1
    arith                          shift and go to state 3
    term                           shift and go to state 4
    factor                         shift and go to state 5

state 1

    (0) S' -> expr .
    (1) expr -> expr . OR expr
    (2) expr -> expr . AND expr

    OR              shift and go to state 8
    AND             shift and go to state 9


state 2

    (3) expr -> NOT . expr
    (1) expr -> . expr OR expr
    (2) expr -> . expr AND expr
    (3) expr -> . NOT expr
    (4) expr -> . arith
    (5) arith -> . arith PLUS term
    (6) arith -> . arith MINUS term
    (7) arith -> . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (10) term -> . factor
    (11) factor -> . LPAREN expr RPAREN
    (12) factor -> . NUMBER

    NOT             shift and go to state 2
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7

    expr                           shift and go to state 10
    arith                          shift and go to state 3
    term                           shift and go to state 4
    factor                         shift and go to state 5

state 3

    (4) expr -> arith .
    (5) arith -> arith . PLUS term
    (6) arith -> arith . MINUS term

    OR              reduce using rule 4 (expr -> arith .)
    AND             reduce using rule 4 (expr -> arith .)
    $end            reduce using rule 4 (expr -> arith .)
    RPAREN          reduce using rule 4 (expr -> arith .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12


state 4

    (7) arith -> term .
    (8) term -> term . TIMES factor
    (9) term -> term . DIVIDE factor

    PLUS            reduce using rule 7 (arith -> term .)
    MINUS           reduce using rule 7 (arith -> term .)
    OR              reduce using rule 7 (arith -> term .)
    AND             reduce using rule 7 (arith -> term .)
    $end            reduce using rule 7 (arith -> term .)
    RPAREN          reduce using rule 7 (arith -> term .)
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14


state 5

    (10) term -> factor .

    TIMES           reduce using rule 10 (term -> factor .)
    DIVIDE          reduce using rule 10 (term -> factor .)
    PLUS            reduce using rule 10 (term -> factor .)
    MINUS           reduce using rule 10 (term -> factor .)
    OR              reduce using rule 10 (term -> factor .)
    AND             reduce using rule 10 (term -> factor .)
    $end            reduce using rule 10 (term -> factor .)
    RPAREN          reduce using rule 10 (term -> factor .)


state 6

    (11) factor -> LPAREN . expr RPAREN
    (1) expr -> . expr OR expr
    (2) expr -> . expr AND expr
    (3) expr -> . NOT expr
    (4) expr -> . arith
    (5) arith -> . arith PLUS term
    (6) arith -> . arith MINUS term
    (7) arith -> . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (10) term -> . factor
    (11) factor -> . LPAREN expr RPAREN
    (12) factor -> . NUMBER

    NOT             shift and go to state 2
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7

    expr                           shift and go to state 15
    arith                          shift and go to state 3
    term                           shift and go to state 4
    factor                         shift and go to state 5

state 7

    (12) factor -> NUMBER .

    TIMES           reduce using rule 12 (factor -> NUMBER .)
    DIVIDE          reduce using rule 12 (factor -> NUMBER .)
    PLUS            reduce using rule 12 (factor -> NUMBER .)
    MINUS           reduce using rule 12 (factor -> NUMBER .)
    OR              reduce using rule 12 (factor -> NUMBER .)
    AND             reduce using rule 12 (factor -> NUMBER .)
    $end            reduce using rule 12 (factor -> NUMBER .)
    RPAREN          reduce using rule 12 (factor -> NUMBER .)


state 8

    (1) expr -> expr OR . expr
    (1) expr -> . expr OR expr
    (2) expr -> . expr AND expr
    (3) expr -> . NOT expr
    (4) expr -> . arith
    (5) arith -> . arith PLUS term
    (6) arith -> . arith MINUS term
    (7) arith -> . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (10) term -> . factor
    (11) factor -> . LPAREN expr RPAREN
    (12) factor -> . NUMBER

    NOT             shift and go to state 2
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7

    expr                           shift and go to state 16
    arith                          shift and go to state 3
    term                           shift and go to state 4
    factor                         shift and go to state 5

state 9

    (2) expr -> expr AND . expr
    (1) expr -> . expr OR expr
    (2) expr -> . expr AND expr
    (3) expr -> . NOT expr
    (4) expr -> . arith
    (5) arith -> . arith PLUS term
    (6) arith -> . arith MINUS term
    (7) arith -> . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (10) term -> . factor
    (11) factor -> . LPAREN expr RPAREN
    (12) factor -> . NUMBER

    NOT             shift and go to state 2
    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7

    expr                           shift and go to state 17
    arith                          shift and go to state 3
    term                           shift and go to state 4
    factor                         shift and go to state 5

state 10

    (3) expr -> NOT expr .
    (1) expr -> expr . OR expr
    (2) expr -> expr . AND expr

    OR              reduce using rule 3 (expr -> NOT expr .)
    AND             reduce using rule 3 (expr -> NOT expr .)
    $end            reduce using rule 3 (expr -> NOT expr .)
    RPAREN          reduce using rule 3 (expr -> NOT expr .)

  ! OR              [ shift and go to state 8 ]
  ! AND             [ shift and go to state 9 ]


state 11

    (5) arith -> arith PLUS . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (10) term -> . factor
    (11) factor -> . LPAREN expr RPAREN
    (12) factor -> . NUMBER

    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7

    term                           shift and go to state 18
    factor                         shift and go to state 5

state 12

    (6) arith -> arith MINUS . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (10) term -> . factor
    (11) factor -> . LPAREN expr RPAREN
    (12) factor -> . NUMBER

    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7

    term                           shift and go to state 19
    factor                         shift and go to state 5

state 13

    (8) term -> term TIMES . factor
    (11) factor -> . LPAREN expr RPAREN
    (12) factor -> . NUMBER

    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7

    factor                         shift and go to state 20

state 14

    (9) term -> term DIVIDE . factor
    (11) factor -> . LPAREN expr RPAREN
    (12) factor -> . NUMBER

    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 7

    factor                         shift and go to state 21

state 15

    (11) factor -> LPAREN expr . RPAREN
    (1) expr -> expr . OR expr
    (2) expr -> expr . AND expr

    RPAREN          shift and go to state 22
    OR              shift and go to state 8
    AND             shift and go to state 9


state 16

    (1) expr -> expr OR expr .
    (1) expr -> expr . OR expr
    (2) expr -> expr . AND expr

    OR              reduce using rule 1 (expr -> expr OR expr .)
    $end            reduce using rule 1 (expr -> expr OR expr .)
    RPAREN          reduce using rule 1 (expr -> expr OR expr .)
    AND             shift and go to state 9

  ! AND             [ reduce using rule 1 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 8 ]


state 17

    (2) expr -> expr AND expr .
    (1) expr -> expr . OR expr
    (2) expr -> expr . AND expr

    OR              reduce using rule 2 (expr -> expr AND expr .)
    AND             reduce using rule 2 (expr -> expr AND expr .)
    $end            reduce using rule 2 (expr -> expr AND expr .)
    RPAREN          reduce using rule 2 (expr -> expr AND expr .)

  ! OR              [ shift and go to state 8 ]
  ! AND             [ shift and go to state 9 ]


state 18

    (5) arith -> arith PLUS term .
    (8) term -> term . TIMES factor
    (9) term -> term . DIVIDE factor

    PLUS            reduce using rule 5 (arith -> arith PLUS term .)
    MINUS           reduce using rule 5 (arith -> arith PLUS term .)
    OR              reduce using rule 5 (arith -> arith PLUS term .)
    AND             reduce using rule 5 (arith -> arith PLUS term .)
    $end            reduce using rule 5 (arith -> arith PLUS term .)
    RPAREN          reduce using rule 5 (arith -> arith PLUS term .)
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14


state 19

    (6) arith -> arith MINUS term .
    (8) term -> term . TIMES factor
    (9) term -> term . DIVIDE factor

    PLUS            reduce using rule 6 (arith -> arith MINUS term .)
    MINUS           reduce using rule 6 (arith -> arith MINUS term .)
    OR              reduce using rule 6 (arith -> arith MINUS term .)
    AND             reduce using rule 6 (arith -> arith MINUS term .)
    $end            reduce using rule 6 (arith -> arith MINUS term .)
    RPAREN          reduce using rule 6 (arith -> arith MINUS term .)
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14


state 20

    (8) term -> term TIMES factor .

    TIMES           reduce using rule 8 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 8 (term -> term TIMES factor .)
    PLUS            reduce using rule 8 (term -> term TIMES factor .)
    MINUS           reduce using rule 8 (term -> term TIMES factor .)
    OR              reduce using rule 8 (term -> term TIMES factor .)
    AND             reduce using rule 8 (term -> term TIMES factor .)
    $end            reduce using rule 8 (term -> term TIMES factor .)
    RPAREN          reduce using rule 8 (term -> term TIMES factor .)


state 21

    (9) term -> term DIVIDE factor .

    TIMES           reduce using rule 9 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 9 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 9 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 9 (term -> term DIVIDE factor .)
    OR              reduce using rule 9 (term -> term DIVIDE factor .)
    AND             reduce using rule 9 (term -> term DIVIDE factor .)
    $end            reduce using rule 9 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 9 (term -> term DIVIDE factor .)


state 22

    (11) factor -> LPAREN expr RPAREN .

    TIMES           reduce using rule 11 (factor -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 11 (factor -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 11 (factor -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 11 (factor -> LPAREN expr RPAREN .)
    OR              reduce using rule 11 (factor -> LPAREN expr RPAREN .)
    AND             reduce using rule 11 (factor -> LPAREN expr RPAREN .)
    $end            reduce using rule 11 (factor -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 11 (factor -> LPAREN expr RPAREN .)

